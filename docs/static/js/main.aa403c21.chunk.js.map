{"version":3,"sources":["mappin.svg","client.svg","Api.js","messageCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_URL","window","location","hostname","sendMessage","message","fetch","method","headers","body","JSON","stringify","then","res","json","props","Card","className","CardTitle","CardText","sendingMessage","sentMessage","haveUserLoction","autoPlay","loop","src","Form","onSubmit","formSubmitted","FormGroup","row","Label","for","Input","onChange","valueChanged","type","name","id","placeholder","Button","color","disabled","formIsValid","greenIcon","L","icon","iconUrl","UserLocation","iconSize","iconAnchor","popupAnchor","clientIcon","clientLocation","schema","Joi","object","keys","string","alphanum","min","max","required","App","state","lat","lng","zoom","userMessage","messages","validate","error","event","preventDefault","setState","latitude","longitude","setTimeout","target","value","prevState","haveSeenLocation","reduce","all","key","toFixed","otherMessages","push","Promise","resolve","navigator","geolocation","getCurrentPosition","position","coords","this","Map","center","TileLayer","attribution","url","haveUserLocation","Marker","map","_id","Popup","haveUsersLocation","href","Component","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.aa403c21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mappin.da7c5886.svg\";","module.exports = __webpack_public_path__ + \"static/media/client.832362f3.svg\";","const API_URL=window.location.hostname==='localhost'?'http://localhost:5000/api/v1/messages':'github.io.parveenmittal1';\r\n\r\nexport  function getMessages() {\r\n\r\n    return fetch(API_URL)\r\n        .then(res => res.json())\r\n        .then(messages => {\r\n            const haveSeenLocation = {};\r\n            return messages.reduce((all, message) => {\r\n                const key = `${message.latitude.toFixed(3)}+${message.longitude.toFixed(3)}`;\r\n                if (haveSeenLocation[key]) {\r\n                    haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || [];\r\n\r\n\r\n                    haveSeenLocation[key].otherMessages.push(message);\r\n                } else {\r\n                    haveSeenLocation[key] = messages;\r\n                    all.push(message)\r\n                }\r\n                return all;\r\n            }, [])\r\n\r\n        })\r\n}\r\n\r\nexport function getLocation() {\r\n    return new Promise((resolve) =>{\r\n        navigator.geolocation.getCurrentPosition((position)=>{\r\n                resolve({\r\n                    lat:    position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                });\r\n        } ,()=>{\r\n                resolve( fetch(\"https://ipapi.co/json\")\r\n                .then(res=>res.json())\r\n                .then(location => {\r\n                    return {\r\n                            lat: location.latitude,\r\n                            lng: location.longitude\r\n                        }\r\n                    })\r\n        )\r\n                })\r\n        },()=>{\r\n\r\n        })\r\n}\r\n\r\nexport function sendMessage(message) {\r\n    return fetch(API_URL,{\r\n        method:'post',\r\n        headers: {\r\n            'content-type':'application/json'\r\n        },\r\n        body:JSON.stringify(message)\r\n    }).then(res=>res.json());\r\n\r\n}\r\n","import React from 'react';\r\nimport { Card, Button, CardTitle, CardText } from 'reactstrap';\r\nimport {  Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\n\r\nexport default (props)=>{\r\n    return (\r\n        <Card body className=\"message-form\">\r\n            <CardTitle>Welcome to the My site </CardTitle>\r\n            <CardText>Leave a message with your location !</CardText>\r\n            {\r\n                !props.sendingMessage&&!props.sentMessage && !props.haveUserLoction?\r\n                    <Form onSubmit={props.formSubmitted}>\r\n                        <FormGroup row>\r\n                            <Label for=\"name\" >Name</Label>\r\n                            {/*<Col sm={10}>*/}\r\n                            <Input\r\n                                onChange={props.valueChanged}\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                id=\"name\"\r\n                                placeholder=\"enter your name\" />\r\n                            {/*</Col>*/}\r\n                        </FormGroup>\r\n                        <FormGroup row>\r\n                            <Label for=\"message\" >Message</Label>\r\n                            {/*<Col sm={10}>*/}\r\n                            <Input\r\n                                onChange={props.valueChanged}\r\n                                type=\"textarea\"\r\n                                name=\"message\"\r\n                                id=\"message\"\r\n                                placeholder=\"enter your message\" />\r\n                            {/*</Col>*/}\r\n                        </FormGroup>\r\n                        <Button type=\"submit\" className=\"btn btn-primary\" color=\"info\" disabled={!props.formIsValid()}>Send</Button>{' '}\r\n                    </Form> :\r\n                    props.sendingMessage || props.haveUserLoction?\r\n                        <video\r\n                            autoPlay\r\n                            loop\r\n                            src=\"https://media.giphy.com/media/hWSQvXbDDh8rlnoLOt/giphy.mp4\">\r\n\r\n                        </video>\r\n                        :<CardText>Thanks for submitting a message</CardText>\r\n\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n","import React ,{Component}from 'react';\nimport {Map,TileLayer,Marker,Popup} from \"react-leaflet\";\nimport {Card,CardText} from 'reactstrap';\nimport Joi from 'joi';\nimport UserLocation from './mappin.svg'\nimport clientLocation from './client.svg'\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport  L from \"leaflet\";\nimport './App.css';\nimport {getMessages,getLocation,sendMessage} from './Api';\nimport MessageCard from \"./messageCard\";\n\nconst greenIcon = L.icon({\n    iconUrl:UserLocation,\n    iconSize:     [50, 81], // size of the icon\n\n    iconAnchor:   [0, 41], // point of the icon which will correspond to marker's location\n\n    popupAnchor:  [0, -41] // point from which the popup should open relative to the iconAnchor\n});\n\nconst clientIcon = L.icon({\n    iconUrl:clientLocation,\n    iconSize:     [50, 81], // size of the icon\n\n    iconAnchor:   [0, 41], // point of the icon which will correspond to marker's location\n\n    popupAnchor:  [0, -41] // point from which the popup should open relative to the iconAnchor\n});\n\nconst schema = Joi.object().keys({\n    name: Joi.string().alphanum().min(1).max(100).required(),\n    message: Joi.string().min(1).max(100).required(),\n})\n\n\nclass  App extends Component {\n    state = {\n        location:{\n            lat: 51.505,\n            lng: -0.09\n        },\n\n        zoom: 13,\n        userMessage:{\n            name:'',\n            message:''\n        },\n        sendingMessage:false,\n        sentMessage:false,\n        messages:[],\n    }\n\n    componentDidMount() {\n        getMessages()\n            .then(messages =>{\n                this.setState({\n                    messages\n                })\n            })\n\n\n        getLocation()\n            .then(location => {\n                this.setState({\n                    location,\n                })\n            })\n\n\n\n    }\n\n    formIsValid =()=>{\n        const userMessage = {\n            name: this.state.userMessage.name,\n            message: this.state.userMessage.message,\n        }\n        const result=Joi.validate(userMessage,schema);\n        return result.error && !this.state.haveUserLoction?false:true;\n    }\n\n    formSubmitted=(event)=>{\n        event.preventDefault();\n      //  console.log(this.state.userMessage)\n\n         if(this.formIsValid()){\n             this.setState({\n                 sendingMessage:true\n             });\n             const message={\n                 name: this.state.userMessage.name,\n                     message: this.state.userMessage.message,\n                 latitude:this.state.location.lat,\n                 longitude:this.state.location.lng,\n             }\n             sendMessage(message)\n                 .then(message=>{\n                         setTimeout(()=>{\n                             this.setState({\n                                 sendingMessage:false,\n                                 sentMessage:true\n                             })\n                         },4000);\n                     });\n         }\n    }\n    valueChanged=(event) => {\n        const {name,value }=event.target;\n\n        this.setState((prevState) =>({\n            userMessage:{\n                ...prevState.userMessage,\n                [name]:value\n            }\n        })\n        )\n    }\n    render() {\n\n        const position = [this.state.location.lat, this.state.location.lng]\n        return (\n            <div className=\"map\">\n\n            <Map className=\"map\" center={position} zoom={this.state.zoom}>\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n\n                {\n                    this.state.haveUserLocation?\n                    <Marker position={position}\n                            icon={greenIcon}>\n\n                    </Marker>:''\n                },\n\n                {\n                    this.state.messages.map(message =>(\n                        <Marker\n                            key={message._id}\n                            position = {[message.latitude,message.longitude]}\n                                icon={clientIcon}>\n                            <Popup>\n                                <p><em>{message.name}:</em> {message.message}</p>\n                                {message.otherMessages?message.otherMessages.map(message =>\n                                    <p key={message._id}><em>{message.name}:</em> {message.message}</p>):\"\"}\n                            </Popup>\n                        </Marker>\n                    ))}\n                }\n            </Map>\n                <MessageCard\n                sendingMessage={this.setState.sendingMessage}\n                sentMessage={this.setState.sentMessage}\n                haveUsersLocation={this.setState.haveUsersLocation}\n                formSubmitted={this.formSubmitted}\n                valueChanged={this.valueChanged}\n                formIsValid={this.formIsValid}\n                />\n                <Card className=\"footer\">\n                    <CardText>Made with love by\n                        <a href=\"https://github.com/parveenmittal1\" target=\"_blank\">Parveen</a>\n            </CardText>\n                </Card>\n            </div>\n        );\n\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet/dist/leaflet.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}